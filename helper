#!/bin/bash

NODE_0=http://127.0.0.1:26555 
NODE_1=http://127.0.0.1:26556
NODE_2=http://127.0.0.1:26557 
NODE_3=http://127.0.0.1:26558 

KEYRING_0='--keyring-backend test --keyring-dir ./data/ibc-0'
KEYRING_1='--keyring-backend test --keyring-dir ./data/ibc-1'
KEYRING_2='--keyring-backend test --keyring-dir ./data/ibc-2'
KEYRING_3='--keyring-backend test --keyring-dir ./data/ibc-3'

GAS_FLAG='--gas-prices 0.025stake --gas auto --gas-adjustment 1.5'
USER="user"
INIT_JSON='{"count": 1}'
INIT_JSON_2='{ "reflect_code_id": 1}'


target=$2
param1=$3
node=$(expr 5 + $2)
node="http://127.0.0.1:26$node"
node+="57"
keyring="--keyring-backend test --keyring-dir ./data/ibc-$target"
chain="ibc-$2"

listKeys()
{
    cmd="wasmd keys list $(echo $keyring)"
    set -x 
    $cmd
}

balance()
{
    set -x 
    wasmd query bank balances $param1 --node $node --chain-id ibc-$target
}

deployAll()
{
    echo "killing all relayers..."
    set -x
    killall rly
    set -e
    cd ./simple-option/
    cargo wasm
    cd ..

    docker run --rm -v "$(pwd)":/code \
        --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \
        --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
        cosmwasm/rust-optimizer-arm64:0.12.5 ./simple-option/

    file="simple-option/target/wasm32-unknown-unknown/release/simple_option.wasm"
    #wasmd's MaxWasmSize change to higher https://github.com/CosmWasm/wasmd/blob/bfb4d31fcafa9acf148e7a9b07b3baed5938c38a/x/wasm/types/validation.go#L12 to skip optimization
#    docker run --rm -v "$(pwd)":/code \
#        --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \
#        --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
#        cosmwasm/rust-optimizer-arm64:0.12.5 ./simplestorage/

    # deploy smart contract to all chains...
    wasmd tx wasm store $file --node $NODE_0 --from $USER --chain-id ibc-0 $GAS_FLAG --broadcast-mode block -y $KEYRING_0
    sleep 1
    wasmd tx wasm store $file --node $NODE_1 --from $USER --chain-id ibc-1 $GAS_FLAG --broadcast-mode block -y $KEYRING_1
    sleep 1
    wasmd tx wasm store $file --node $NODE_2 --from $USER --chain-id ibc-2 $GAS_FLAG --broadcast-mode block -y $KEYRING_2

    #get code ids at each chain
    code_id_0=$(wasmd query wasm list-code --node $NODE_0 --output json | jq -r ".code_infos[-1] | .code_id")
    code_id_1=$(wasmd query wasm list-code --node $NODE_1 --output json | jq -r ".code_infos[-1] | .code_id")
    code_id_2=$(wasmd query wasm list-code --node $NODE_2 --output json | jq -r ".code_infos[-1] | .code_id")

    #instantiate contracts at all chains
    wasmd tx wasm instantiate $code_id_0 "$INIT_JSON" --node $NODE_0 --from $USER --chain-id ibc-0 $GAS_FLAG -y --label "simplestorage" --no-admin $KEYRING_0
    wasmd tx wasm instantiate $code_id_1 "$INIT_JSON" --node $NODE_1 --from $USER --chain-id ibc-1 $GAS_FLAG -y --label "simplestorage" --no-admin $KEYRING_1
    wasmd tx wasm instantiate $code_id_2 "$INIT_JSON" --node $NODE_2 --from $USER --chain-id ibc-2 $GAS_FLAG -y --label "simplestorage" --no-admin $KEYRING_2

    sleep 2
    contract_address_0=$(wasmd query wasm list-contract-by-code $code_id_0 --node $NODE_0 --output json | jq -r '.contracts[-1]')
    contract_address_1=$(wasmd query wasm list-contract-by-code $code_id_1 --node $NODE_1 --output json | jq -r '.contracts[-1]')
    contract_address_2=$(wasmd query wasm list-contract-by-code $code_id_2 --node $NODE_2 --output json | jq -r '.contracts[-1]')
    if [ -z $contract_address_0 ] || [ -z $contract_address_1 ] || [ -z $contract_address_2 ]; then
        echo "!!!!!!!!!!!!!!!!!!!! retrying getting contract address !!!!!!!!!!!!!!"
        sleep 2
        contract_address_0=$(wasmd query wasm list-contract-by-code $code_id_0 --node $NODE_0 --output json | jq -r '.contracts[-1]')
        contract_address_1=$(wasmd query wasm list-contract-by-code $code_id_1 --node $NODE_1 --output json | jq -r '.contracts[-1]')
        contract_address_2=$(wasmd query wasm list-contract-by-code $code_id_2 --node $NODE_2 --output json | jq -r '.contracts[-1]')
    fi

    ibc_port_0=$(wasmd query wasm contract $contract_address_0 --node $NODE_0 --output --json | jq -r '.contract_info | .ibc_port_id')
    ibc_port_1=$(wasmd query wasm contract $contract_address_1 --node $NODE_1 --output --json | jq -r '.contract_info | .ibc_port_id')
    ibc_port_2=$(wasmd query wasm contract $contract_address_2 --node $NODE_2 --output --json | jq -r '.contract_info | .ibc_port_id')

    echo "-----------------------------------------Link Setup-----------------------------------------------"
    set -x
    rly tx link path01 --src-port $ibc_port_0 --dst-port $ibc_port_1 --order ordered --version trustboost-test 
    rly tx link path02 --src-port $ibc_port_0 --dst-port $ibc_port_2 --order ordered --version trustboost-test
    set +x

    sleep 2
    set +x
    echo "------------------------------------------Addreses-------------------------------------------------------"
    echo "Deployed with code id $code_id_0 on chain 0 Contract Address = $contract_address_0 ibc_port = $ibc_port_0"
    echo "Deployed with code id $code_id_1 on chain 1 Contract Address = $contract_address_1 ibc_port = $ibc_port_1"
    echo "Deployed with code id $code_id_2 on chain 2 Contract Address = $contract_address_2 ibc_port = $ibc_port_2"
    echo "-----------------------------------------Channels-----------------------------------------------"
    set -x
    chan1=$(wasmd query ibc channel channels --node $NODE_0 --output --json | jq -r '.channels[-2] | .channel_id')
    chan2=$(wasmd query ibc channel channels --node $NODE_0 --output --json | jq -r '.channels[-1] | .channel_id')
    set +x
    echo "Channel Id for 01: $chan1"
    echo "Channel Id for 02: $chan2"

    #rly start path01 --debug-addr localhost:7596 & 
    #rly start path02 --debug-addr localhost:7597 &

    out="contract address: $contract_address_0 \n"
    out+="Channel id 01: $chan1 \n"
    out+="Channel id 02: $chan2 \n"
    echo -e $out > out.log
}

deployOne()
{
    node=$NODE_0
    user=$USER
    keyring=$KEYRING_0
    init='{"count": 1}'
    chain='ibc-0'
    set -e
    set -x
    cd ./simple-option/
    cargo wasm
    cd ..

    docker run --rm -v "$(pwd)":/code \
        --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \
        --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
        cosmwasm/rust-optimizer-arm64:0.12.5 ./simple-option/

    file="simple-option/target/wasm32-unknown-unknown/release/simple_option.wasm"
    wasmd tx wasm store $file --node $node --from $user --chain-id $chain --gas-prices "0.025stake" --gas auto --gas-adjustment 1.5 --broadcast-mode block -y $keyring

    # get code id of deployed contract and
    # instantiate contract and get address of the instantiated contract
    code_id=$(wasmd query wasm list-code --node $node --output json | jq -r ".code_infos[-1] | .code_id")
    wasmd tx wasm instantiate $code_id "$init" --node $node --from $user --chain-id $chain $GAS_FLAG -y --label "simplestorage" --no-admin $keyring
    # wait 2 secs for the contract to be deployed properly
    sleep 2
    contract_address=$(wasmd query wasm list-contract-by-code $code_id --node $node --output json | jq -r '.contracts[-1]')

    if [ -z $contract_address ]; then
        echo "retrying getting contract address...."
        sleep 2
        contract_address=$(wasmd query wasm list-contract-by-code $code_id --node $node --output json | jq -r '.contracts[-1]')
    fi

    ibc_port=$(wasmd query wasm contract $contract_address --node $node --output --json | jq -r '.contract_info | .ibc_port_id')
    set +x
    echo "Deployed with code id $code_id on Node 0 Contract Address = $contract_address ibc_port = $ibc_port"
}


setUV() 
{
    set -x
    node=$NODE_0
    code_id=$(wasmd query wasm list-code --node $node --output json | jq -r ".code_infos[-1] | .code_id")
    contract_address=$(wasmd query wasm list-contract-by-code $code_id --node $node --output json | jq -r '.contracts[-1]')
    EXEC_MSG="{\"set\": {\"value\": \"$param1\"}}"
    wasmd tx wasm execute $contract_address "$EXEC_MSG" --amount 100stake $GAS_FLAG --node $node --chain-id $chain --from $USER $keyring
}

queryUV() 
{
    set -x
    code_id=$(wasmd query wasm list-code --node $node --output json | jq -r ".code_infos[-1] | .code_id")
    contract_address=$(wasmd query wasm list-contract-by-code $code_id --node $node --output json | jq -r '.contracts[-1]')
    QUERY_MSG="{\"get_uncomitted_value\": {\"key\": $param1}}"
    wasmd query wasm contract-state smart $contract_address "$QUERY_MSG" --output json --chain-id $chain --node $node
}

queryCV() 
{
    set -x
    code_id=$(wasmd query wasm list-code --node $node --output json | jq -r ".code_infos[-1] | .code_id")
    contract_address=$(wasmd query wasm list-contract-by-code $code_id --node $node --output json | jq -r '.contracts[-1]')
    QUERY_MSG="{\"get_comitted_value\": {\"key\": $param1}}"
    wasmd query wasm contract-state smart $contract_address "$QUERY_MSG" --output json --chain-id $chain --node $node
}


queryChan()
{
    set -x
    code_id=$(wasmd query wasm list-code --node $node --output json | jq -r ".code_infos[-1] | .code_id")
    contract_address=$(wasmd query wasm list-contract-by-code $code_id --node $node --output json | jq -r '.contracts[-1]')
    QUERY_MSG="{\"list_channels\": "[]"}"
    wasmd query wasm contract-state smart $contract_address "$QUERY_MSG" --chain-id $chain --node $node
}


listChannels() 
{
    set -x
    wasmd query ibc channel channels --node $node
}


if [ -z $1 ]; then
    echo "Need Param 1 what to do"
    exit 1
fi


if [ $1 = "deployAll" ]; then 
    deployAll
    exit 0
elif [ $1 = "deployOne" ]; then
    deployOne
    exit 0
fi


if [ -z $2 ]; then
    echo "Need target chain 0/1/2"
    exit 1
fi 


if [ $1 = "listKeys" ]; then 
    listKeys
elif [ $1 = "balance" ]; then
    if [ -z $3 ]; then
        echo "Need address $3"
        exit 1
    fi 
    balance
elif [ $1 = "listChannels" ]; then
    listChannels
elif [ $1 = "setUV" ]; then
    setUV
elif [ $1 = "queryUV" ] || [ $1 = "getUV" ]; then
    queryUV
elif [ $1 = "queryCV" ]  || [ $1 = "getCV" ]; then
    queryCV
elif [ $1 = "queryChan" ]; then
    queryChan
else
    echo "unknown method in helper script see"
fi
